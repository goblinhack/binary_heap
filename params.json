{"name":"Binary heap","tagline":"Example implementation of a binary heap - useful in A * star searches","body":"binary_heap\r\n===========\r\n\r\nExample implementation of a binary heap - useful in A * star searches\r\n\r\nIn a sorted list or tree, every element in the tree is in the correct order.\r\nHowever this is not needed for A* where we just want to pull the lowest cost\r\nkey out of the tree. We don't care if the whole tree is sorted; the rest of\r\nthe list can be a jumble as long as when we pull items off the list they are\r\nsorted.\r\n\r\nA binary heap is bunch of items where either the lowest or highest value item is at \r\nthe top of the heap. In this demo, I use the lowest value ordering. Each element in\r\nthe heap has two children and it must have a value lower than those two children.\r\n\r\ne.g. this linear array (the heap):\r\n\r\n<pre>\r\n    3  7 42 9 12 65 44\r\n</pre>\r\n\r\ncan be viewed as a tree\r\n\r\n<pre>\r\n                                ___ 3 ___\r\n                               /         \\\r\n                              7           42 \r\n                            /  \\         /  \\\r\n                           9   12       65   44\r\n\r\n</pre>\r\n\r\nWhen insterting elements, we add them to the end of the array and then compare\r\nwith the parent node ((index - 1) / 2) and swap if the parent is lower.\r\n\r\nWhen popping from the head, we take the head element out and swap it with the\r\nelement at the end of the array. Then we compare with each child node (index * 2) + 1\r\n\r\nSo each thread of the tree will always be sorted, but the whole tree itself may not\r\nbe; which is a lot quicker for A* where once we fill the tree, we just want to drain\r\nit, in sort order.\r\n\r\nThe example code, heap.c and binary, binary_heap should produce results like the \r\nfollowing when ran.\r\n\r\n<pre>\r\ninserted 7  (1  in use):7  \r\ninserted 49 (2  in use):7  49 \r\ninserted 73 (3  in use):7  49 73 \r\ninserted 58 (4  in use):7  49 73 58 \r\ninserted 30 (5  in use):7  30 73 58 49 \r\ninserted 72 (6  in use):7  30 72 58 49 73 \r\ninserted 44 (7  in use):7  30 44 58 49 73 72 \r\ninserted 78 (8  in use):7  30 44 58 49 73 72 78 \r\ninserted 23 (9  in use):7  23 44 30 49 73 72 78 58 \r\ninserted 9  (10 in use):7  9  44 30 23 73 72 78 58 49 \r\ninserted 40 (11 in use):7  9  44 30 23 73 72 78 58 49 40 \r\ninserted 65 (12 in use):7  9  44 30 23 65 72 78 58 49 40 73 \r\ninserted 92 (13 in use):7  9  44 30 23 65 72 78 58 49 40 73 92 \r\ninserted 42 (14 in use):7  9  42 30 23 65 44 78 58 49 40 73 92 72 \r\ninserted 87 (15 in use):7  9  42 30 23 65 44 78 58 49 40 73 92 72 87 \r\ninserted 3  (16 in use):3  7  42 9  23 65 44 30 58 49 40 73 92 72 87 78 \r\ninserted 27 (17 in use):3  7  42 9  23 65 44 27 58 49 40 73 92 72 87 78 30 \r\ninserted 29 (18 in use):3  7  42 9  23 65 44 27 29 49 40 73 92 72 87 78 30 58 \r\ninserted 40 (19 in use):3  7  42 9  23 65 44 27 29 49 40 73 92 72 87 78 30 58 40 \r\ninserted 12 (20 in use):3  7  42 9  12 65 44 27 29 23 40 73 92 72 87 78 30 58 40 49 \r\npopped   3  (19 in use):7  9  42 27 12 65 44 30 29 23 40 73 92 72 87 78 49 58 40 \r\npopped   7  (18 in use):9  12 42 27 23 65 44 30 29 40 40 73 92 72 87 78 49 58 \r\npopped   9  (17 in use):12 23 42 27 40 65 44 30 29 58 40 73 92 72 87 78 49 \r\npopped   12 (16 in use):23 27 42 29 40 65 44 30 49 58 40 73 92 72 87 78 \r\npopped   23 (15 in use):27 29 42 30 40 65 44 78 49 58 40 73 92 72 87 \r\npopped   27 (14 in use):29 30 42 49 40 65 44 78 87 58 40 73 92 72 \r\npopped   29 (13 in use):30 40 42 49 40 65 44 78 87 58 72 73 92 \r\npopped   30 (12 in use):40 40 42 49 58 65 44 78 87 92 72 73 \r\npopped   40 (11 in use):40 49 42 73 58 65 44 78 87 92 72 \r\npopped   40 (10 in use):42 49 44 73 58 65 72 78 87 92 \r\npopped   42 (9  in use):44 49 65 73 58 92 72 78 87 \r\npopped   44 (8  in use):49 58 65 73 87 92 72 78 \r\npopped   49 (7  in use):58 73 65 78 87 92 72 \r\npopped   58 (6  in use):65 73 72 78 87 92 \r\npopped   65 (5  in use):72 73 92 78 87 \r\npopped   72 (4  in use):73 78 92 87 \r\npopped   73 (3  in use):78 87 92 \r\npopped   78 (2  in use):87 92 \r\npopped   87 (1  in use):92 \r\npopped   92 (0  in use):\r\n</pre>\r\n\r\nPlese let me know if this is useful to anyone. I wrote this as examples I found did\r\nnot quite work, and/or had no demo of it working.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}